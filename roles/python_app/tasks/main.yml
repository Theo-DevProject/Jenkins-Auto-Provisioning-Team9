---
# roles/python_app/tasks/main.yml

# 1) Base Python tools (cross-distro)
- name: Ensure Python and pip are present
  package:
    name:
      - python3
      - python3-pip
    state: present
  become: true

# 2) Install virtualenv via pip (avoid distro-specific *-venv packages)
- name: Install virtualenv (system-wide)
  pip:
    name: virtualenv
    executable: pip3
    state: present
  become: true

# 3) App directory
- name: Ensure app directory exists
  file:
    path: /opt/system-monitor
    state: directory
    mode: '0755'
  become: true

# 4) App sources
- name: Copy metrics agent (log_stats.py)
  copy:
    src: log_stats.py
    dest: /opt/system-monitor/log_stats.py
    mode: '0755'
  become: true

- name: Copy requirements file
  copy:
    src: requirements.txt
    dest: /opt/system-monitor/requirements.txt
    mode: '0644'
  become: true

# 5) Create venv using virtualenv (works everywhere)
- name: Create Python virtual environment
  command: python3 -m virtualenv /opt/system-monitor/venv
  args:
    creates: /opt/system-monitor/venv/bin/activate
  become: true

# 6) Install deps into the venv (idempotent)
- name: Upgrade pip in venv
  pip:
    name: pip
    state: latest
    virtualenv: /opt/system-monitor/venv
  become: true

- name: Install requirements into venv
  pip:
    requirements: /opt/system-monitor/requirements.txt
    virtualenv: /opt/system-monitor/venv
    state: present
  become: true

# Optional hardening: make sure these are there regardless of the requirements file
- name: Ensure Flask + PyMySQL + Matplotlib present in venv
  pip:
    name:
      - Flask
      - PyMySQL
      - matplotlib
    virtualenv: /opt/system-monitor/venv
    state: present
  become: true

# 7) Runtime configuration + service
- name: Write /opt/system-monitor/.env (from group vars)
  template:
    src: env_vars.j2
    dest: /opt/system-monitor/.env
    mode: '0644'
  become: true

# --- UI assets for the interactive dashboard ---
- name: Ensure Flask template/static directories exist
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /opt/system-monitor/templates
    - /opt/system-monitor/static
  become: true

- name: Copy sql_console.py (Flask app)
  copy:
    src: sql_console.py
    dest: /opt/system-monitor/sql_console.py
    mode: '0755'
  become: true

- name: Copy dashboard template
  copy:
    src: templates/dashboard.html
    dest: /opt/system-monitor/templates/dashboard.html
    mode: '0644'
  become: true

- name: Copy dashboard JS
  copy:
    src: static/app.js
    dest: /opt/system-monitor/static/app.js
    mode: '0644'
  become: true

# --- Systemd units: web app + metrics agent timer (15s) ---
- name: Install systemd unit for SQL console
  template:
    src: sql-console.service.j2
    dest: /etc/systemd/system/sql-console.service
    mode: '0644'
  become: true

# These two templates should encode OnUnitActiveSec=15s in the timer.
- name: Install systemd unit for log-stats service
  template:
    src: log-stats.service.j2
    dest: /etc/systemd/system/log-stats.service
    mode: '0644'
  become: true

- name: Install systemd timer for log-stats (15s)
  template:
    src: log-stats.timer.j2
    dest: /etc/systemd/system/log-stats.timer
    mode: '0644'
  become: true

# 8) Reload/enable/start services
- name: Reload systemd
  command: systemctl daemon-reload
  become: true

- name: Enable & (re)start log-stats timer
  systemd:
    name: log-stats.timer
    enabled: true
    state: started
  become: true

- name: Unmask, enable & (re)start sql-console
  systemd:
    name: sql-console
    enabled: true
    state: restarted
  become: true

# âœ… Wait for the app port before Jenkins probes (uses ips.yml)
- name: Wait for app port
  wait_for:
    host: "{{ ips.app_private_ip }}"
    port: "{{ ips.app_port }}"
    delay: 2
    timeout: 30
  become: false

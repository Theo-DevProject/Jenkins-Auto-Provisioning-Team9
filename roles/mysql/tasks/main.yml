---
# --- Install packages per OS ---

- name: Update apt cache (Debian/Ubuntu)
  apt:
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Install MySQL packages (Debian/Ubuntu)
  apt:
    name: "{{ mysql_pkgs_debian }}"
    state: present
  when: ansible_os_family == "Debian"

- name: Install MariaDB packages (RedHat family except Amazon 2023)
  package:
    name: "{{ mysql_pkgs_redhat }}"
    state: present
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution != "Amazon"

# Amazon Linux 2023 needs different package names
- name: Install MariaDB packages (Amazon Linux 2023)
  package:
    name: "{{ mysql_pkgs_amzn2023 }}"
    state: present
  when:
    - ansible_distribution == "Amazon"

# Ensure PyMySQL (driver for community.mysql) exists on RedHat/Amazon via pip
- name: Install PyMySQL via pip when needed
  pip:
    name: PyMySQL
  when: ansible_os_family == "RedHat" or ansible_distribution == "Amazon"

# --- Enable/Start service ---

- name: Ensure MySQL/MariaDB started & enabled
  service:
    name: >-
      {{ (ansible_distribution == 'Amazon') | ternary(mysql_service_amzn2023,
         (ansible_os_family == 'Debian') | ternary(mysql_service_debian, mysql_service_redhat)) }}
    state: started
    enabled: yes

# --- Bind 0.0.0.0 ---

- name: Drop bind config (Debian/Ubuntu)
  template:
    src: my.cnf.j2
    dest: "{{ mysql_conf_debian }}"
  when: ansible_os_family == "Debian"
  notify: restart mysql

- name: Drop bind config (RedHat non-Amazon)
  template:
    src: my.cnf.j2
    dest: "{{ mysql_conf_redhat }}"
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution != "Amazon"
  notify: restart mysql

- name: Drop bind config (Amazon Linux 2023)
  template:
    src: my.cnf.j2
    dest: "{{ mysql_conf_amzn2023 }}"
  when: ansible_distribution == "Amazon"
  notify: restart mysql

- name: Wait for port
  wait_for:
    port: "{{ mysql_listen_port }}"
    delay: 3

# --- Secure + DB/User/Table ---

- name: Ensure root password via socket (Debian/Ubuntu)
  community.mysql.mysql_user:
    name: root
    password: "{{ mysql_root_password }}"
    login_unix_socket: "{{ mysql_socket_debian }}"
    state: present
  when: ansible_os_family == "Debian"

- name: Ensure root password via socket (RedHat non-Amazon)
  community.mysql.mysql_user:
    name: root
    password: "{{ mysql_root_password }}"
    login_unix_socket: "{{ mysql_socket_redhat }}"
    state: present
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution != "Amazon"

  community.mysql.mysql_user:
    name: root
    password: "{{ mysql_root_password }}"
    login_unix_socket: "{{ mysql_socket_amzn2023 }}"
    state: present
  when: ansible_distribution == "Amazon"

# --- Ensure root password on Amazon Linux 2023 (idempotent) ---
- block:
    - name: Ensure root password via socket (first run)
      community.mysql.mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_unix_socket: "{{ mysql_socket_amzn2023 }}"
        state: present
  rescue:
    - name: Ensure root password via password (re-runs)
      community.mysql.mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        state: present
  when: ansible_distribution == "Amazon"
- name: Create application database
  community.mysql.mysql_db:
    name: "{{ db_name }}"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Create application user (allow remote)
  community.mysql.mysql_user:
    name: "{{ db_user }}"
    host: '%'
    password: "{{ db_password }}"
    priv: "{{ db_name }}.*:ALL"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Create stats table
  community.mysql.mysql_query:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_db: "{{ db_name }}"
    query: |
      CREATE TABLE IF NOT EXISTS stats (
        id INT AUTO_INCREMENT PRIMARY KEY,
        timestamp DATETIME,
        cpu_usage FLOAT,
        memory_usage FLOAT,
        INDEX idx_timestamp (timestamp)
      );
